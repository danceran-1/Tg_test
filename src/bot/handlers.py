import bot.keybords as kb
from aiogram import Router ,Bot,Dispatcher
from aiogram import F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import time ,asyncio ,random

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton ,ReplyKeyboardMarkup,KeyboardButton

from datetime import datetime ,timedelta

from aiogram.types import FSInputFile

check = 0 

router = Router()

class Form(StatesGroup):
    waiting_for_login = State()
    waiting_for_time = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Start"""
    
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=kb.get_api)


#–ú–ï–ù–Æ
@router.callback_query((F.data == "support") | (F.data == "inf_about_company") | (F.data == "service"))
async def menu_supp(callback: CallbackQuery):
    """—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.back)
    await callback.answer()

@router.callback_query((F.data == "get_data"))
async def menu_bd(callback: CallbackQuery):
    """—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.data_base)
    await callback.answer()

@router.callback_query((F.data == "complaint"))
async def menu_complaint(callback: CallbackQuery):
    """—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.projects)
    await callback.answer()

@router.callback_query((F.data == "oneC"))
async def menu_complaint(callback: CallbackQuery):
    """—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
  
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.oneC)
    await callback.answer()

@router.callback_query((F.data == "include_in"))
async def menu_complaint(callback: CallbackQuery):
    """—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
   
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.count)
    await callback.answer()


#–ü–æ–¥–∫–∞—Ç–µ—Ä–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "first")
async def ctgry_first(callback: CallbackQuery, state:FSMContext):


    await callback.message.edit_text(
        
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup = kb.for_first 
    )

@router.callback_query(F.data == "PodPod")
async def ctgry_first_podPod(callback: CallbackQuery, state:FSMContext):

   
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup = kb.for_first_pod_pod 
    )

@router.callback_query((F.data == "one_more") | (F.data == "second"))
async def ctgry_first_podPod(callback: CallbackQuery, state:FSMContext):

    await callback.message.edit_text(
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ",
        reply_markup = kb.just_menue 
    )


#1c
@router.callback_query(F.data == "manage")
async def oneC_manage(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–°–æ–∑–¥–∞–Ω–∏–µ_–ó–∞–∫–∞–∑–∞_–ü–æ–∫—É–ø–∞—Ç–µ–ª—è_–∏_–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ_—Å—á—ë—Ç–∞.pdf",filename="–°–æ–∑–¥–∞–Ω–∏–µ_–ó–∞–∫–∞–∑–∞_–ü–æ–∫—É–ø–∞—Ç–µ–ª—è_–∏_–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ_—Å—á—ë—Ç–∞.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–æ–∑–¥–∞–Ω–∏–µ –ó–∞–∫–∞–∑–∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞.",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "nakldnay")
async def oneC_nakldnay(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π.pdf",filename="–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "back_buyer")
async def oneC_back_buyer(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–í–æ–∑–≤—Ä–∞—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.pdf",filename="–í–æ–∑–≤—Ä–∞—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –í–æ–∑–≤—Ä–∞—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "kontragen")
async def oneC_kontragen(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.pdf",filename="–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "numencklatura")
async def oneC_numencklatura(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã.pdf",filename="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã",
        reply_markup = kb.just_menue 
    )



#–ñ–ê–õ–û–ë–´
@router.callback_query(F.data == "klen")
async def rec_klen(callback: CallbackQuery, state:FSMContext):

    
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    with open("docs/klen.txt",'r',encoding='utf-8') as file:
        S = file.read()

    await callback.message.edit_text(
        S,
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "restint")
async def rec_hard_word(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    document = FSInputFile("docs/–†–µ—Å—Ç–∏–Ω—Ç–µ—Ä–Ω–µ—à–Ω–ª.docx",filename="–†–µ—Å—Ç–∏–Ω—Ç–µ—Ä–Ω–µ—à–Ω–ª.docx")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –†–µ—Å—Ç–∏–Ω—Ç–µ—Ä–Ω–µ—à–Ω–ª",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "mg")
async def rec_mg(callback: CallbackQuery, state:FSMContext):

   
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    with open("docs/–º–∞—Å—Ç–µ—Ä–≥–ª–∞—Å.txt",'r',encoding='utf-8') as file:
        S = file.read()

    await callback.message.edit_text(
        S,
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "project_2015")
async def rec_project_2015(callback: CallbackQuery, state:FSMContext):

    
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    with open("docs/–ø—Ä–æ–µ–∫—Ç_2015.txt",'r',encoding='utf-8') as file:
        S = file.read()

    await callback.message.edit_text(
        S,
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "project_russia")
async def rec_russian_prj(callback: CallbackQuery, state:FSMContext):

    
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.1)
    await msg1.delete()

    with open("docs/–º–µ—Ç—Ä–∞–Ω–æ–º.txt",'r',encoding='utf-8') as file:
        S = file.read()

    await callback.message.edit_text(
        S,
        reply_markup = kb.just_menue 
    )

# –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô
@router.callback_query(F.data == "barnyi_inventar")
async def bz_inventary(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.4)
    await msg1.delete()

    document = FSInputFile("docs/–ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (3).pdf",filename="–ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (3).pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        reply_markup = kb.just_menue 
    )

@router.callback_query(F.data == "food")
async def bz_food(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    await asyncio.sleep(0.4)
    await msg1.delete()

    document = FSInputFile("docs/–°–∏—Ä–æ–ø—ã, —Ç–æ–ø–∏–Ω–≥–∏, –ø—é—Ä–µ.pdf",filename="–°–∏—Ä–æ–ø—ã, —Ç–æ–ø–∏–Ω–≥–∏, –ø—é—Ä–µ.pdf")

    await callback.message.answer_document(
        document=document,
        caption="–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–∏—Ä–æ–ø—ã, —Ç–æ–ø–∏–Ω–≥–∏, –ø—é—Ä–µ",
        reply_markup = kb.just_menue 
    )

@router.callback_query((F.data == "tools") | (F.data == "third"))
async def bz_tools(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    msg1 = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ... üòä")
    

# –í–æ–∑–≤—Ä–∞—Ç
@router.callback_query(F.data == "get_back")
async def back(callback: CallbackQuery, state:FSMContext):

    # await callback.message.delete()
    await callback.message.edit_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
        reply_markup=kb.get_api
    )
    await callback.answer()

@router.callback_query(F.data == "get_back2")
async def back(callback: CallbackQuery, state:FSMContext):

    await callback.message.delete()
    await callback.message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
        reply_markup=kb.get_api
    )
    await callback.answer()
    check = 1

@router.callback_query(F.data == "get_back1")
async def back(callback: CallbackQuery, state:FSMContext):


    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup=kb.count
    )



